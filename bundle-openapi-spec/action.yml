name: "bundle openapi specification"
description: "Bundles multiple openapi files into one file."
author: "eDACT"
inputs:
  input_path:
    description: "Path of file that should be bundled."
    required: false
    default: "src/public/openapi-raw.yml"
  output_path:
    description: "Path of the bundled output file."
    required: false
    default: "src/public/openapi.yml"
  output_filetype:
    description: "Filetype of the bundled output file. Accepts 'json' or 'yaml'."
    required: false
    default: "yaml"
  dereference:
    description: "Boolean wether to fully derefence the specification."
    required: false
    default: "false"
  delete_files:
    description: "Boolean wether to delete files that have been inlined by the bundling."
    required: false
    default: "true"
  delete_glob:
    description: "Glob pattern to delete child openapi files relative to input path."
    required: false
    default: "**/*.oas.*"

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        #
        # makes the script existing once an error occours
        set -euo pipefail

        if [ ! -f "${{ inputs.input_path }}" ]; then
            echo "::error::${{ inputs.input_path }} does not exist!"
            exit 1
        fi

        # check if requested filetype is correct
        if [ "${{ inputs.output_filetype }}" != "yaml" ] && [ "${{ inputs.output_filetype }}" != "json" ] ; then
            echo "::error::FILETYPE must be either 'yaml' or 'json'!"
            exit 1
        fi

        # bundle
        echo "::group::Bundling openapi specification.."
        npx --package @apidevtools/swagger-cli swagger-cli bundle \
            --outfile ${{ inputs.output_path }} \
            --type ${{ inputs.output_filetype }} \
            $( [ "${{ inputs.dereference }}" = true ] && printf %s "--dereference" ) \
            ${{ inputs.input_path }}
        echo "::endgroup::"


        # delete sub files by glob
        echo "::group::Deleting files that are now bundled into the main specification.."
        if [ "${{ inputs.delete_files }}" = true ] ; then
            DIR=$(dirname "${{ inputs.input_path }}")
            cd ${DIR}
            rm ${{ inputs.delete_glob }} -v -f
        fi
        echo "::endgroup::"
